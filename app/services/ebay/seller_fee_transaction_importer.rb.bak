module Ebay
  class SellerFeeTransactionImporter
    class ImportError < StandardError; end

    def initialize(api_client = EbayFinanceClient.new)
      @api_client = api_client
    end

    # 取引データをインポート
    # @return [String] 処理結果
    def import
      transactions_data = @api_client.fetch_transactions

      begin
        process_transactions(transactions_data["transactions"])
      rescue StandardError => e
        raise ImportError, "取引データのインポートに失敗しました: #{e.message}"
      end

      "処理が完了しました"
    end

    private

    # 取引データを処理
    # @param transactions [Array] 取引データの配列
    def process_transactions(transactions)
      transactions.each do |transaction|
        order_number = find_order_number(transaction)

        next unless order_number

        order = Order.find_by(order_number: order_number)
        next unless order

        process_transaction_by_type(order, transaction)
      end
    end

    # 取引タイプに応じて適切なプロセッサークラスを使用
    # @param order [Order] 注文オブジェクト
    # @param transaction [Hash] 取引データ
    def process_transaction_by_type(order, transaction)
      processor_class = case transaction["transactionType"]
        when "SALE"
          Transactions::SaleTransactionProcessor
        when "SHIPPING_LABEL"
          Transactions::ShippingLabelTransactionProcessor
        when "NON_SALE_CHARGE"
          Transactions::NonSaleChargeTransactionProcessor
        when "REFUND"
          Transactions::RefundTransactionProcessor
        else
          Rails.logger.debug "Unsupported transaction type: #{transaction['transactionType']}"
          return
      end

      processor_class.new(order, transaction).process
    end

    # 取引データから注文番号を取得
    # @param transaction [Hash] 取引データ
    # @return [String, nil] 注文番号
    def find_order_number(transaction)
      order_number = if transaction["transactionType"] == "NON_SALE_CHARGE"
        # references 配列から referenceType が ORDER_ID の要素を探す
        order_id_reference = transaction["references"]&.find { |ref| ref["referenceType"] == "ORDER_ID" }
        order_id_reference&.[]("referenceId")
      else
        # 通常の処理 (SALE, REFUND, SHIPPING_LABEL など)
        transaction["orderId"]
      end

      return nil if order_number.nil? || order_number == "0"

      order_number
    end
  end
end

module Transactions
  class SaleTransactionProcessor
    def initialize(order, transaction)
      @order = order
      @transaction = transaction
    end

    def process
      Rails.logger.debug "Processing sale transaction: #{@transaction['transactionId']}"

      begin
        log_transaction_details
        fee_processed = process_marketplace_fees
        create_sale_record if fee_processed
        Rails.logger.debug "Transaction processing completed successfully"
      rescue StandardError => e
        Rails.logger.error "予期せぬエラー: #{e.class.name} - #{e.message}"
        Rails.logger.error e.backtrace.join("\n")
        raise
      end
    end

    private

    # トランザクションの詳細情報をログに記録
    def log_transaction_details
      Rails.logger.debug "Transaction keys: #{@transaction.keys.inspect}"
      Rails.logger.debug "Transaction type: #{@transaction['transactionType']}"

      amount = @transaction.dig("amount", "value").to_d
      Rails.logger.debug "Amount: #{amount.inspect}"

      total_fee_basis_amount = @transaction.dig("totalFeeBasisAmount", "value").to_d
      Rails.logger.debug "Total Fee Basis Amount: #{total_fee_basis_amount.inspect}"

      Rails.logger.debug "OrderLineItems count: #{@transaction['orderLineItems']&.size || 'N/A'}"
    end

    # マーケットプレイス手数料を処理
    # @return [Boolean] 少なくとも1つの手数料が処理されたかどうか
    def process_marketplace_fees
      fee_processed = false

      # orderLineItemsがnilの場合は処理をスキップ
      return fee_processed unless @transaction["orderLineItems"].is_a?(Array)

      @transaction["orderLineItems"].each_with_index do |item, idx|
        Rails.logger.debug "Processing orderLineItem #{idx}: #{item.keys.inspect}"

        unless valid_marketplace_fees?(item)
          Rails.logger.error "Invalid marketplaceFees for item #{idx}: #{item['marketplaceFees'].inspect}"
          next
        end

        item["marketplaceFees"].each_with_index do |fee, fee_idx|
          if process_single_fee(item, fee, idx, fee_idx)
            fee_processed = true
          end
        end
      end

      fee_processed
    end

    # 単一の手数料を処理
    # @param item [Hash] オーダーラインアイテム
    # @param fee [Hash] 手数料データ
    # @param item_idx [Integer] アイテムのインデックス (ログ用)
    # @param fee_idx [Integer] 手数料のインデックス (ログ用)
    # @return [Boolean] 手数料の処理に成功したかどうか
    def process_single_fee(item, fee, item_idx, fee_idx)
      Rails.logger.debug "Processing fee #{fee_idx} of item #{item_idx}: #{fee.inspect}"

      fee_category = determine_fee_category(fee)
      Rails.logger.debug "Fee category determined as: #{fee_category}"

      if duplicate_fee?(fee_category)
        Rails.logger.debug "Skipping duplicate fee: transaction_id=#{@transaction['transactionId']}, fee_category=#{fee_category}"
        return false
      end

      begin
        payment_fee = PaymentFee.create!(
          order: @order,
          transaction_type: :sale,
          transaction_id: @transaction["transactionId"],
          fee_category: fee_category,
          fee_amount: fee.dig("amount", "value").to_d
        )
        Rails.logger.debug "Created PaymentFee: #{payment_fee.id}"
        true
      rescue ActiveRecord::RecordNotUnique => e
        Rails.logger.warn "重複エラー (個別処理): #{e.message}"
        false
      rescue => e
        Rails.logger.error "Failed to create PaymentFee: #{e.message}"
        Rails.logger.error e.backtrace.join("\n")
        raise
      end
    end

    # 手数料カテゴリを判定
    # @param fee [Hash] 手数料データ
    # @return [String] 手数料カテゴリ
    def determine_fee_category(fee)
      PaymentFee.fee_categories.values.include?(fee["feeType"]) ? fee["feeType"] : "undefined"
    end

    # 手数料が重複しているかチェック
    # @param fee_category [String] 手数料カテゴリ
    # @return [Boolean] 重複しているかどうか
    def duplicate_fee?(fee_category)
      PaymentFee.exists?(
        transaction_id: @transaction["transactionId"],
        transaction_type: PaymentFee.transaction_types[:sale],
        fee_category: fee_category
      )
    end

    # marketplaceFeesが有効かチェック
    # @param item [Hash] オーダーラインアイテム
    # @return [Boolean] 有効かどうか
    def valid_marketplace_fees?(item)
      item["marketplaceFees"].is_a?(Array) && !item["marketplaceFees"].nil?
    end

    # Saleレコードを作成
    def create_sale_record
      # 同じオーダーIDですでにSALEタイプ（正の金額）のレコードが存在するかチェック
      return if Sale.where(order_id: @order.id).where("order_net_amount > 0").exists?

      begin
        amount = @transaction.dig("amount", "value").to_d
        total_fee_basis_amount = @transaction.dig("totalFeeBasisAmount", "value").to_d

        # USD以外の通貨の場合、amount内にexchangeRateが含まれる
        exchange_rate_value = @transaction.dig("amount", "exchangeRate")
        exchange_rate = exchange_rate_value.nil? ? 1.0 : exchange_rate_value.to_d
        Rails.logger.debug "Exchange rate from API: #{exchange_rate}"

        sale = Sale.create!(
          order: @order,
          order_net_amount: amount,
          order_gross_amount: total_fee_basis_amount,
          exchangerate: exchange_rate
        )
        Rails.logger.debug "Created Sale: #{sale.id}"
      rescue ActiveRecord::RecordNotUnique => e
        Rails.logger.warn "重複エラー (Sale): #{e.message}"
      rescue => e
        Rails.logger.error "Failed to create Sale: #{e.message}"
        Rails.logger.error e.backtrace.join("\n")
        raise
      end
    end
  end

  class ShippingLabelTransactionProcessor
    def initialize(order, transaction)
      @order = order
      @transaction = transaction
    end

    def process
      Rails.logger.debug "Processing shipping label transaction: #{@transaction['transactionId']}"

      begin
        log_transaction_details
        create_shipping_label_payment_fee
        Rails.logger.debug "Shipping label transaction processing completed successfully"
      rescue StandardError => e
        Rails.logger.error "予期せぬエラー: #{e.class.name} - #{e.message}"
        Rails.logger.error e.backtrace.join("\n")
        raise
      end
    end

    private

    # トランザクションの詳細情報をログに記録
    def log_transaction_details
      Rails.logger.debug "Transaction keys: #{@transaction.keys.inspect}"
      Rails.logger.debug "Transaction type: #{@transaction['transactionType']}"

      amount = @transaction.dig("amount", "value").to_d
      Rails.logger.debug "Amount: #{amount.inspect}"

      total_fee_basis_amount = @transaction.dig("totalFeeBasisAmount", "value").to_d
      Rails.logger.debug "Total Fee Basis Amount: #{total_fee_basis_amount.inspect}"

      Rails.logger.debug "OrderLineItems count: #{@transaction['orderLineItems']&.size || 'N/A'}"
    end

    # 配送ラベル用のPaymentFeeレコードを作成
    def create_shipping_label_payment_fee
      # 既に同じtransaction_idの配送ラベル処理が存在する場合はスキップ
      if duplicate_shipping_label_fee?
        Rails.logger.debug "Skipping duplicate shipping label transaction: #{@transaction['transactionId']}"
        return
      end

      fee_amount = @transaction.dig("amount", "value").to_d
      Rails.logger.debug "Shipping label fee amount: #{fee_amount}"

      begin
        payment_fee = PaymentFee.create!(
          order: @order,
          transaction_type: :shipping_label,
          transaction_id: @transaction["transactionId"],
          fee_category: "undefined",
          fee_amount: fee_amount
        )
        Rails.logger.debug "Created shipping label PaymentFee: #{payment_fee.id}"
      rescue ActiveRecord::RecordNotUnique => e
        Rails.logger.warn "重複エラー (配送ラベル): #{e.message}"
      rescue => e
        Rails.logger.error "Failed to create shipping label PaymentFee: #{e.message}"
        Rails.logger.error e.backtrace.join("\n")
        raise
      end
    end

    # 配送ラベル手数料が重複しているかチェック
    # @return [Boolean] 重複しているかどうか
    def duplicate_shipping_label_fee?
      PaymentFee.exists?(
        order: @order,
        transaction_id: @transaction["transactionId"],
        transaction_type: PaymentFee.transaction_types[:shipping_label]
      )
    end
  end

  class NonSaleChargeTransactionProcessor
    def initialize(order, transaction)
      @order = order
      @transaction = transaction
    end

    def process
      Rails.logger.debug "Processing non-sale charge transaction: #{@transaction['transactionId']}"

      begin
        log_transaction_details
        create_non_sale_charge_payment_fee
        Rails.logger.debug "Non-sale charge transaction processing completed successfully"
      rescue StandardError => e
        Rails.logger.error "予期せぬエラー: #{e.class.name} - #{e.message}"
        Rails.logger.error e.backtrace.join("\n")
        raise
      end
    end

    private

    # トランザクションの詳細情報をログに記録
    def log_transaction_details
      Rails.logger.debug "Transaction keys: #{@transaction.keys.inspect}"
      Rails.logger.debug "Transaction type: #{@transaction['transactionType']}"

      amount = @transaction.dig("amount", "value").to_d
      Rails.logger.debug "Amount: #{amount.inspect}"

      total_fee_basis_amount = @transaction.dig("totalFeeBasisAmount", "value").to_d
      Rails.logger.debug "Total Fee Basis Amount: #{total_fee_basis_amount.inspect}"

      Rails.logger.debug "OrderLineItems count: #{@transaction['orderLineItems']&.size || 'N/A'}"
    end

    # 非販売手数料用のPaymentFeeレコードを作成
    def create_non_sale_charge_payment_fee
      # AD_FEE以外はスキップ
      unless @transaction["feeType"] == "AD_FEE"
        Rails.logger.debug "Skipping non-AD_FEE transaction: #{@transaction['transactionId']}, feeType: #{@transaction['feeType']}"
        return
      end

      # 既に同じtransaction_idの非販売手数料処理が存在する場合はスキップ
      if duplicate_non_sale_charge_fee?
        Rails.logger.debug "Skipping duplicate non-sale charge transaction: #{@transaction['transactionId']}"
        return
      end

      fee_amount = @transaction.dig("amount", "value").to_d
      Rails.logger.debug "Non-sale charge fee amount: #{fee_amount}"

      # bookingEntry が CREDIT なら fee_amount を反転
      if @transaction["bookingEntry"] == "CREDIT"
        fee_amount *= -1
        Rails.logger.debug "Reversed fee amount due to CREDIT booking entry: #{fee_amount}"
      end

      begin
        payment_fee = PaymentFee.create!(
          order: @order,
          transaction_type: :non_sale_charge,
          transaction_id: @transaction["transactionId"],
          fee_category: @transaction["feeType"],
          fee_amount: fee_amount
        )
        Rails.logger.debug "Created non-sale charge PaymentFee: #{payment_fee.id}"
      rescue ActiveRecord::RecordNotUnique => e
        Rails.logger.warn "重複エラー (非販売手数料): #{e.message}"
      rescue => e
        Rails.logger.error "Failed to create non-sale charge PaymentFee: #{e.message}"
        Rails.logger.error e.backtrace.join("\n")
        raise
      end
    end

    # 非販売手数料が重複しているかチェック
    # @return [Boolean] 重複しているかどうか
    def duplicate_non_sale_charge_fee?
      PaymentFee.exists?(
        order: @order,
        transaction_id: @transaction["transactionId"],
        transaction_type: PaymentFee.transaction_types[:non_sale_charge]
      )
    end
  end

  class RefundTransactionProcessor
    def initialize(order, transaction)
      @order = order
      @transaction = transaction
    end

    def process
      Rails.logger.debug "Processing refund transaction: #{@transaction['transactionId']}"

      begin
        log_transaction_details
        create_refund_payment_fee
        Rails.logger.debug "Refund transaction processing completed successfully"
      rescue StandardError => e
        Rails.logger.error "予期せぬエラー: #{e.class.name} - #{e.message}"
        Rails.logger.error e.backtrace.join("\n")
        raise
      end
    end

    private

    # トランザクションの詳細情報をログに記録
    def log_transaction_details
      Rails.logger.debug "Transaction keys: #{@transaction.keys.inspect}"
      Rails.logger.debug "Transaction type: #{@transaction['transactionType']}"

      amount = @transaction.dig("amount", "value").to_d
      Rails.logger.debug "Amount: #{amount.inspect}"

      total_fee_basis_amount = @transaction.dig("totalFeeBasisAmount", "value").to_d
      Rails.logger.debug "Total Fee Basis Amount: #{total_fee_basis_amount.inspect}"

      Rails.logger.debug "OrderLineItems count: #{@transaction['orderLineItems']&.size || 'N/A'}"
    end

    # 返金用のPaymentFeeレコードを作成
    def create_refund_payment_fee
      # DEBIT以外のbookingEntryはスキップ
      unless @transaction["bookingEntry"] == "DEBIT"
        Rails.logger.debug "Skipping non-DEBIT refund transaction: #{@transaction['transactionId']}, bookingEntry: #{@transaction['bookingEntry']}"
        return
      end

      # 既に同じtransaction_idの返金処理が存在する場合はスキップ
      if duplicate_refund_fee?
        Rails.logger.debug "Skipping duplicate refund transaction: #{@transaction['transactionId']}"
        return
      end

      amount = @transaction.dig("amount", "value").to_d
      Rails.logger.debug "Refund amount: #{amount}"

      total_fee_basis_amount = @transaction.dig("totalFeeBasisAmount", "value").to_d
      Rails.logger.debug "Refund total fee basis amount: #{total_fee_basis_amount}"

      fee_amount = @transaction.dig("totalFeeAmount", "value").to_d
      Rails.logger.debug "Refund fee amount: #{fee_amount}"

      begin
        # トランザクション内で処理して一貫性を確保
        ActiveRecord::Base.transaction do
          # 返金用のSaleレコードを新規に作成（通常のSaleデータとは別に保存）
          sale = Sale.create!(
            order: @order,
            order_net_amount: -amount,
            order_gross_amount: -total_fee_basis_amount
          )
          Rails.logger.debug "Created refund Sale: #{sale.id}"

          payment_fee = PaymentFee.create!(
            order: @order,
            transaction_type: :refund,
            transaction_id: @transaction["transactionId"],
            fee_category: "undefined",
            fee_amount: -fee_amount  # マイナス値として保存
          )
          Rails.logger.debug "Created refund PaymentFee: #{payment_fee.id}"
        end
      rescue ActiveRecord::RecordNotUnique => e
        Rails.logger.warn "重複エラー (返金): #{e.message}"
      rescue => e
        Rails.logger.error "Failed to create refund records: #{e.message}"
        Rails.logger.error e.backtrace.join("\n")
        raise
      end
    end

    # 返金手数料が重複しているかチェック
    # @return [Boolean] 重複しているかどうか
    def duplicate_refund_fee?
      PaymentFee.exists?(
        order: @order,
        transaction_id: @transaction["transactionId"],
        transaction_type: PaymentFee.transaction_types[:refund]
      )
    end
  end
end
