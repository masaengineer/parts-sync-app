name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.6'
          bundler-cache: true

      - name: Install dependencies
        run: bundle install

      - name: Run Rubocop
        run: bundle exec rubocop

      - name: Run Brakeman
        run: bundle exec brakeman

  test:
    needs: lint
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.6'
          bundler-cache: true

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: |
          bundle install
          yarn install

      - name: Setup Database
        env:
          RAILS_ENV: test
          POSTGRES_HOST: localhost
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          REDIS_URL: redis://localhost:6379/0
        run: |
          bundle exec rails db:create
          bundle exec rails db:schema:load

      - name: Run Unit Tests (Models & Services)
        env:
          RAILS_ENV: test
          POSTGRES_HOST: localhost
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          REDIS_URL: redis://localhost:6379/0
        run: |
          bundle exec rspec spec/models
          bundle exec rspec spec/services

      - name: Run Integration Tests
        env:
          RAILS_ENV: test
          POSTGRES_HOST: localhost
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          REDIS_URL: redis://localhost:6379/0
        run: bundle exec rspec spec/requests

      - name: Run Smoke Tests
        env:
          RAILS_ENV: test
          POSTGRES_HOST: localhost
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          REDIS_URL: redis://localhost:6379/0
        run: bundle exec rspec spec/system --tag smoke

      - name: Run System Tests
        env:
          RAILS_ENV: test
          POSTGRES_HOST: localhost
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          REDIS_URL: redis://localhost:6379/0
        run: bundle exec rspec spec/system

      - name: Upload Test Artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            tmp/screenshots/
            log/test.log
            tmp/capybara/

  docker-test:
    runs-on: ubuntu-latest
    needs: lint
    if: ${{ github.event_name == 'pull_request' }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Images
        run: docker compose -f compose.test.yml build

      - name: Run Fast Tests in Docker
        run: docker compose -f compose.test.yml run --rm test bundle exec rspec spec/models spec/services spec/requests

      - name: Run Smoke Tests in Docker
        run: docker compose -f compose.test.yml run --rm test bundle exec rspec spec/system --tag smoke

      - name: Upload Docker Test Artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: docker-test-artifacts
          path: |
            tmp/screenshots/
            log/test.log
            tmp/capybara/
