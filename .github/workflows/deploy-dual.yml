name: Dual Deploy (Render & AWS)

on:
  workflow_run:
    workflows: ['CI']
    branches: [main]
    types:
      - completed

jobs:
  verify:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.6'
          bundler-cache: true

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: |
          bundle install
          yarn install

      - name: Setup Database
        env:
          RAILS_ENV: test
          POSTGRES_HOST: localhost
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          REDIS_URL: redis://localhost:6379/0
        run: |
          bundle exec rails db:create
          bundle exec rails db:schema:load

  build-docker-image:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    needs: verify
    outputs:
      image_tag: ${{ steps.set_image_tag.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Set image tag
        id: set_image_tag
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          IMAGE_TAG="${SHORT_SHA}-$(date +'%Y%m%d%H%M%S')"
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: parts-sync-app:${{ steps.set_image_tag.outputs.image_tag }}
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save Docker image
        run: |
          docker save parts-sync-app:${{ steps.set_image_tag.outputs.image_tag }} > /tmp/parts-sync-app.tar

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/parts-sync-app.tar
          retention-days: 1

  deploy-render:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    needs: [verify, build-docker-image]
    environment:
      name: render-production
      url: https://parts-sync.site
    steps:
      - name: Deploy to Render Production
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID_PRODUCTION: ${{ secrets.RENDER_SERVICE_ID_PRODUCTION }}
        run: |
          curl -X POST "https://api.render.com/v1/services/$RENDER_SERVICE_ID_PRODUCTION/deploys" \
            -H "accept: application/json" \
            -H "authorization: Bearer $RENDER_API_KEY"

      - name: Notify Slack on Render Deploy
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: workflow,job,commit,repo,ref,author,took
          custom_payload: |
            {
              "attachments": [{
                "color": "good",
                "text": "Render環境へのデプロイが完了しました :rocket:\nURL: https://parts-sync.site",
                "fields": [
                  {
                    "title": "コミット",
                    "value": "${{ github.sha }}",
                    "short": true
                  },
                  {
                    "title": "ブランチ",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  }
                ],
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-aws:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    needs: [verify, build-docker-image]
    environment:
      name: aws-production
      url: https://parts-sync-app.link/
    steps:
      - uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp

      - name: Load Docker image
        run: |
          docker load --input /tmp/parts-sync-app.tar
          docker images parts-sync-app

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag and push Docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: parts-sync-app
          IMAGE_TAG: ${{ needs.build-docker-image.outputs.image_tag }}
        run: |
          docker tag parts-sync-app:${IMAGE_TAG} ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
          docker tag parts-sync-app:${IMAGE_TAG} ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest
          echo "image=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Update ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .aws/task-definition.json
          container-name: parts-sync-app-container
          image: ${{ steps.login-ecr.outputs.registry }}/parts-sync-app:${{ needs.build-docker-image.outputs.image_tag }}

      - name: Deploy to ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: parts-sync-app-service
          cluster: parts-sync-app-cluster
          wait-for-service-stability: true

      - name: Notify Slack on AWS Deploy
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: workflow,job,commit,repo,ref,author,took
          custom_payload: |
            {
              "attachments": [{
                "color": "good",
                "text": "AWS環境へのデプロイが完了しました :rocket:\nURL: https://parts-sync-app.link/",
                "fields": [
                  {
                    "title": "コミット",
                    "value": "${{ github.sha }}",
                    "short": true
                  },
                  {
                    "title": "イメージタグ",
                    "value": "${{ needs.build-docker-image.outputs.image_tag }}",
                    "short": true
                  },
                  {
                    "title": "ブランチ",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  }
                ],
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
